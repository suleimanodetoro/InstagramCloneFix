type Like @model @auth(rules: [{ allow: public }]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "LikesForPostByUser"
      sortKeyFields: "userID"
    )
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}
# To filter the list of comments by post, you need to create an index. Good thing is we already have an index, we just need to add queryField and sortKey by postId
type Comment @model @auth(rules: [{ allow: public }]) {
  id: ID!
  comment: String
  userID: ID! @index(name: "byUser")
  postID: ID! @index(name: "byPost", queryField: "commentsByPost")
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post @model @auth(rules: [{ allow: public }]) {
  id: ID!
  description: String
  image: String
  video: String
  images: [String!]
  nOfComments: Int!
  nOfLikes: Int!
  userID: ID! @index(name: "byUser")
  User: User @belongsTo(fields: ["userID"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  image: String
  bio: String
  username: String
    @index(name: "usersByUsername", queryField: "usersByUsername")
  website: AWSURL
  nOfFollowings: Int!
  nOfFollowers: Int!
  nOfPosts: Int!
  email: String!
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])
}
