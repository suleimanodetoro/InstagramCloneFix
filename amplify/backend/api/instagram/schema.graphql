# Change from public to private to enamble me change authurization with => amplify update api
# We need private rules only for read operations, then allow owner of data to write, update, and, delete
type Like
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  postID: ID!
    @index(
      name: "byPost"
      queryField: "LikesForPostByUser"
      sortKeyFields: "userID"
    )
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}
# To filter the list of comments by post, you need to create an index. Good thing is we already have an index, we just need to add queryField and sortKey by postId
type Comment
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  # Add createdAt to sort comments by date they were created. Add to sortKeyFields
  createdAt: AWSDateTime!
  comment: String
  userID: ID! @index(name: "byUser")
  # Add sortkeyfield createdAt
  postID: ID!
    @index(
      name: "byPost"
      queryField: "commentsByPost"
      sortKeyFields: ["createdAt"]
    )
  User: User @belongsTo(fields: ["userID"])
  Post: Post @belongsTo(fields: ["postID"])
}

type Post
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  # Add createdAt
  createdAt: AWSDateTime!
  # Add a field that'll make sense to query all posts, that an index can be added to so as to use sortKeyFields
  # Because all posts will have a type: string, I will add that, then add index so enable me sort the post results by date
  type: String!
    @index(
      name: "postsByDate"
      queryField: "postsByDate"
      sortKeyFields: ["createdAt"]
    )
  description: String
  image: String
  video: String
  images: [String!]
  nOfComments: Int!
  nOfLikes: Int!
  userID: ID! @index(name: "byUser")
  User: User @belongsTo(fields: ["userID"])
  Likes: [Like] @hasMany(indexName: "byPost", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
}

type User
  @model
  @auth(rules: [{ allow: private, operations: [read] }, { allow: owner }]) {
  id: ID!
  name: String!
  image: String
  bio: String
  username: String
    @index(name: "usersByUsername", queryField: "usersByUsername")
  website: AWSURL
  nOfFollowings: Int!
  nOfFollowers: Int!
  nOfPosts: Int!
  # Add auth rule to email to disallow everyone from seeing the email. Only owner of the email
  # Apparently i need to make email nullable?
  email: String @auth(rules: [{ allow: owner }])
  Posts: [Post] @hasMany(indexName: "byUser", fields: ["id"])
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  Likes: [Like] @hasMany(indexName: "byUser", fields: ["id"])
}
# Add new type for subsciptions
type Subscription {
  # monitor anytime a comment is ccreated under a certain post
  # Will be used in comment screen...
  # The return type will Comment, @aws_subscribe to define that it is a subscription
  # Provide the mutation (remember from the comment service screen? => commentService create mutation)
  onCreateCommentByPostId(postID: ID!): Comment
    @aws_subscribe(mutations: ["createComment"])
}
